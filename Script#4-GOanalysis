###################################################################################
############  4. Pipe Data to Gene Set Analysis    ################################
###################################################################################
# load Libraries
setwd
library(topGO)
library(GO.db)
library(org.Hs.eg.db)
library(Rgraphviz)
#rm(list=ls())
##....if starting here
counts <- read.table("RESULTS-CAT/counts-LIMMA.txt", header=TRUE, sep = "\t"); head(counts)
annot <- read.table("RESULTS-CAT/annot-LIMMA.txt", header=TRUE, sep = "\t");head(annot)
design <- read.table("RESULTS-CAT/design-LIMMA.txt", header=TRUE, sep = "\t");head(design)
contr.matrix <- read.table("RESULTS-CAT/counts-LIMMA.txt", header=TRUE, sep = "\t");head(annot)
expressed_genes <-read.table("RESULTS-CAT/Exp_Genes_All.txt", header=TRUE, sep = "\t");head(expressed_genes)
Table1 <- read.table("RESULTS-CAT/SIG_Genes_Table1.txt", header=TRUE, sep = "\t"); head(Table1)
Table2 <- read.table("RESULTS-CAT/SIG_Genes_Table2.txt", header=TRUE, sep = "\t"); head(Table2)
Table3 <- read.table("RESULTS-CAT/SIG_Genes_Table3.txt", header=TRUE, sep = "\t"); head(Table3)
Table4 <- read.table("RESULTS-CAT/SIG_Genes_Table4.txt", header=TRUE, sep = "\t"); head(Table4)
Table5 <- read.table("RESULTS-CAT/SIG_Genes_Table5.txt", header=TRUE, sep = "\t"); head(Table5)
Table6 <- read.table("RESULTS-CAT/SIG_Genes_Table6.txt", header=TRUE, sep = "\t"); head(Table6)

## 3.1 Analysis using topGO
# 3.1.1 Table 1 analysis High vs None
all_genes <- as.vector(annot$GeneSymbol)
table1_genes <- as.vector(Table1$GeneSymbol)

# then make a factor that is 1 if the probeset is "interesting" and 0 otherwise
geneList <- factor(as.integer(all_genes %in% table1_genes))
# name the factor with the probeset names
names (geneList) <- all_genes
str(geneList)

GOdata_BP1 <-new ("topGOdata", 
    ontology = "BP", 
    allGenes = geneList, 
    nodeSize = 5, 
    annot = annFUN.org, 
    mapping = "org.Hs.eg.db", 
    ID = "symbol")

# Run Fisher test
resultFisher_BP <- runTest(GOdata_BP1, algorithm = "classic", statistic = "fisher")
resultKS_BP <- runTest(GOdata_BP1, algorithm = "classic", statistic = "ks")
resultKS.elim_BP <- runTest(GOdata_BP1, algorithm = "elim", statistic = "ks")
allRes_BP1 <- GenTable(GOdata_BP1, classicFisher = resultFisher_BP,
                   classicKS = resultKS_BP, elimKS = resultKS_BP,
                   orderBy = "classicKS", ranksOf = "classicFisher", topNodes = 30)

# Collate results...
allRes_BP1
write.table(allRes_BP1, file = "RESULTS-CAT/GO_results_BP_Table1.txt", sep = "\t")

# Draw node image
tiff(file = "PLOTS-CAT/GO_BP_Nodes_Table1.tiff", res=500, unit = "in", width = 12, height = 9);
showSigOfNodes(GOdata_BP1, score(resultKS_BP), firstSigNodes = 15, useInfo = 'all')
dev.off()

## 3.1.2 Table 2 analysis HighPos vs NonePos
all_genes <- as.vector(annot$GeneSymbol)
table2_genes <- as.vector(Table2$GeneSymbol)

# then make a factor that is 1 if the probeset is "interesting" and 0 otherwise
geneList <- factor(as.integer(all_genes %in% table2_genes))
# name the factor with the probeset names
names (geneList) <- all_genes
str(geneList)

GOdata_BP2 <-new ("topGOdata", 
    ontology = "BP", 
    allGenes = geneList, 
    nodeSize = 5, 
    annot = annFUN.org, 
    mapping = "org.Hs.eg.db", 
    ID = "symbol")

# run Fisher test
resultFisher_BP <- runTest(GOdata_BP2, algorithm = "classic", statistic = "fisher")
resultKS_BP <- runTest(GOdata_BP2, algorithm = "classic", statistic = "ks")
resultKS.elim_BP <- runTest(GOdata_BP2, algorithm = "elim", statistic = "ks")
allRes_BP2 <- GenTable(GOdata_BP2, classicFisher = resultFisher_BP,
                   classicKS = resultKS_BP, elimKS = resultKS_BP,
                   orderBy = "classicKS", ranksOf = "classicFisher", topNodes = 30)

# collate results...
allRes_BP2
write.table(allRes_BP2, file = "RESULTS-CAT/GO_results_BP_Table2.txt", sep = "\t")

## draw node image

tiff(file = "PLOTS-CAT/GO_BP_Nodes_Table2.tiff", res=500, unit = "in", width = 12, height = 9);
showSigOfNodes(GOdata_BP2, score(resultKS_BP), firstSigNodes = 15, useInfo = 'all')
dev.off()

# 3.1.3 Table 3 analysis Med vs None
all_genes <- as.vector(annot$GeneSymbol)
table3_genes <- as.vector(Table3$GeneSymbol)

# then make a factor that is 1 if the probeset is "interesting" and 0 otherwise
geneList <- factor(as.integer(all_genes %in% table3_genes))
# name the factor with the probeset names
names (geneList) <- all_genes
str(geneList)

GOdata_BP3 <-new ("topGOdata", 
    ontology = "BP", 
    allGenes = geneList, 
    nodeSize = 5, 
    annot = annFUN.org, 
    mapping = "org.Hs.eg.db", 
    ID = "symbol")

# run Fisher test
resultFisher_BP <- runTest(GOdata_BP3, algorithm = "classic", statistic = "fisher")
resultKS_BP <- runTest(GOdata_BP3, algorithm = "classic", statistic = "ks")
resultKS.elim_BP <- runTest(GOdata_BP3, algorithm = "elim", statistic = "ks")
allRes_BP3 <- GenTable(GOdata_BP3, classicFisher = resultFisher_BP,
                   classicKS = resultKS_BP, elimKS = resultKS_BP,
                   orderBy = "classicKS", ranksOf = "classicFisher", topNodes = 30)

# collate results...
allRes_BP3
write.table(allRes_BP3, file = "RESULTS-CAT/GO_results_BP_Table3.txt", sep = "\t")

## draw node image

tiff(file = "PLOTS-CAT/GO_BP_Nodes_Table3.tiff", res=500, unit = "in", width = 12, height = 9);
showSigOfNodes(GOdata_BP3, score(resultKS_BP), firstSigNodes = 15, useInfo = 'all')
dev.off()

# 3.1.4 Table 4 analysis Low vs NoneNeg
all_genes <- as.vector(annot$GeneSymbol)
table4_genes <- as.vector(Table4$GeneSymbol)

# then make a factor that is 1 if the probeset is "interesting" and 0 otherwise
geneList <- factor(as.integer(all_genes %in% table4_genes))
# name the factor with the probeset names
names (geneList) <- all_genes
str(geneList)

GOdata_BP4 <-new ("topGOdata", 
    ontology = "BP", 
    allGenes = geneList, 
    nodeSize = 5, 
    annot = annFUN.org, 
    mapping = "org.Hs.eg.db", 
    ID = "symbol")

# run Fisher test
resultFisher_BP <- runTest(GOdata_BP4, algorithm = "classic", statistic = "fisher")
resultKS_BP <- runTest(GOdata_BP4, algorithm = "classic", statistic = "ks")
resultKS.elim_BP <- runTest(GOdata_BP4, algorithm = "elim", statistic = "ks")
allRes_BP4 <- GenTable(GOdata_BP4, classicFisher = resultFisher_BP,
                   classicKS = resultKS_BP, elimKS = resultKS_BP,
                   orderBy = "classicKS", ranksOf = "classicFisher", topNodes = 30)

# collate results...
allRes_BP4
write.table(allRes_BP4, file = "RESULTS-CAT/GO_results_BP_Table4.txt", sep = "\t")

## draw node image

tiff(file = "PLOTS-CAT/GO_BP_Nodes_Table4.tiff", res=500, unit = "in", width = 12, height = 9);
showSigOfNodes(GOdata_BP4, score(resultKS_BP), firstSigNodes = 15, useInfo = 'all')
dev.off()


# 3.1.5 Table 5 analysis Virus vs NoneNeg
all_genes <- as.vector(annot$GeneSymbol)
table5_genes <- as.vector(Table5$GeneSymbol)

# then make a factor that is 1 if the probeset is "interesting" and 0 otherwise
geneList <- factor(as.integer(all_genes %in% table5_genes))
# name the factor with the probeset names
names (geneList) <- all_genes
str(geneList)

GOdata_BP5 <-new ("topGOdata", 
    ontology = "BP", 
    allGenes = geneList, 
    nodeSize = 5, 
    annot = annFUN.org, 
    mapping = "org.Hs.eg.db", 
    ID = "symbol")

# run Fisher test
resultFisher_BP <- runTest(GOdata_BP5, algorithm = "classic", statistic = "fisher")
resultKS_BP <- runTest(GOdata_BP5, algorithm = "classic", statistic = "ks")
resultKS.elim_BP <- runTest(GOdata_BP5, algorithm = "elim", statistic = "ks")
allRes_BP5 <- GenTable(GOdata_BP5, classicFisher = resultFisher_BP,
                   classicKS = resultKS_BP, elimKS = resultKS_BP,
                   orderBy = "classicKS", ranksOf = "classicFisher", topNodes = 30)

# collate results...
allRes_BP5
write.table(allRes_BP5, file = "RESULTS-CAT/GO_results_BP_Table5.txt", sep = "\t")

## draw node image

tiff(file = "PLOTS-CAT/GO_BP_Nodes_Table5.tiff", res=500, unit = "in", width = 12, height = 9);
showSigOfNodes(GOdata_BP5, score(resultKS_BP), firstSigNodes = 15, useInfo = 'all')
dev.off()


# 3.1.6 Table 6 analysis NonePos vs NoneNeg
all_genes <- as.vector(annot$GeneSymbol)
table6_genes <- as.vector(Table6$GeneSymbol)

# then make a factor that is 1 if the probeset is "interesting" and 0 otherwise
geneList <- factor(as.integer(all_genes %in% table6_genes))
# name the factor with the probeset names
names (geneList) <- all_genes
str(geneList)

GOdata_BP6 <-new ("topGOdata", 
    ontology = "BP", 
    allGenes = geneList, 
    nodeSize = 5, 
    annot = annFUN.org, 
    mapping = "org.Hs.eg.db", 
    ID = "symbol")

# run Fisher test
resultFisher_BP <- runTest(GOdata_BP6, algorithm = "classic", statistic = "fisher")
resultKS_BP <- runTest(GOdata_BP6, algorithm = "classic", statistic = "ks")
resultKS.elim_BP <- runTest(GOdata_BP6, algorithm = "elim", statistic = "ks")
allRes_BP6 <- GenTable(GOdata_BP6, classicFisher = resultFisher_BP,
                   classicKS = resultKS_BP, elimKS = resultKS_BP,
                   orderBy = "classicKS", ranksOf = "classicFisher", topNodes = 30)

# collate results...
allRes_BP6
write.table(allRes_BP6, file = "RESULTS-CAT/GO_results_BP_Table6.txt", sep = "\t")

## draw node image

tiff(file = "PLOTS-CAT/GO_BP_Nodes_Table6.tiff", res=500, unit = "in", width = 12, height = 9);
showSigOfNodes(GOdata_BP6, score(resultKS_BP), firstSigNodes = 15, useInfo = 'all')
dev.off()

## 3.2. Compare GO terms for DATA
#LIMMA vennDiagram function requires data as 1 and 0 values, to use list of values use VennDiagram package.  
library(VennDiagram)

## 3.2.1 compare HIGHvsNONE vs LOWvsNONE  
#Compare using x$GO.ID or first term

venn.diagram(list(High = allRes_BP1[,1], Low = allRes_BP4[,1]), filename = "PLOTS-CAT/HighvsLow-GOterms.tiff", height = 3000, width = 3000, resolution =
    300, imagetype = "tiff", units = "px", main = " High vs Low GO Terms", 
main.cex = 3, cat.fontface="bold", scaled = TRUE, label.cex = 3, cat.pos = c(330, 30), cat.cex = 2.5, fill = c("red", "lightblue"), alpha = 0.5, cex = 3)

venn.diagram(list(NonePOS = allRes_BP6[,1], Low = allRes_BP4[,1]), filename = "PLOTS-CAT/NonePOSvsLow-GOterms.tiff", height = 3000, width = 3000, resolution =
    300, imagetype = "tiff", units = "px", main = " NonePOS vs Low GO Terms", 
main.cex = 3, cat.fontface="bold", scaled = TRUE, label.cex = 3, cat.pos = c(330, 30), cat.cex = 2.5, fill = c("yellow", "lightblue"), alpha = 0.5, cex = 3)

venn.diagram(list(High = allRes_BP1[,1], Virus = allRes_BP5[,1]), filename = "PLOTS-CAT/HighvsVirus-GOterms.tiff", height = 3000, width = 3000, resolution =
    300, imagetype = "tiff", units = "px", main = " High vs Low GO Terms", 
main.cex = 3, cat.fontface="bold", scaled = TRUE, label.cex = 3, cat.pos = c(330, 30), cat.cex = 2.5, fill = c("red", "pink"), alpha = 0.5, cex = 3)

venn.diagram(list(High = allRes_BP1[,1], Med = allRes_BP3[,1]), filename = "PLOTS-CAT/HighvsMed-GOterms.tiff", height = 3000, width = 3000, resolution =
    300, imagetype = "tiff", units = "px", main = " High vs Low GO Terms", 
main.cex = 3, cat.fontface="bold", scaled = TRUE, label.cex = 3, cat.pos = c(330, 30), cat.cex = 2.5, fill = c("red", "green"), alpha = 0.5, cex = 3)

venn.diagram(list(Low = allRes_BP4[,1], Med = allRes_BP3[,1]), filename = "PLOTS-CAT/LowvsMed-GOterms.tiff", height = 3000, width = 3000, resolution =
    300, imagetype = "tiff", units = "px", main = " Med vs Low GO Terms", 
main.cex = 3, cat.fontface="bold", scaled = TRUE, label.cex = 3, cat.pos = c(330, 30), cat.cex = 2.5, fill = c("lightblue", "green"), alpha = 0.5, cex = 3)

venn.diagram(list(NonePOS = allRes_BP6[,1], Med = allRes_BP3[,1]), filename = "PLOTS-CAT/NonePosvsMed-GOterms.tiff", height = 3000, width = 3000, resolution =
    300, imagetype = "tiff", units = "px", main = " Med vs NonePOS GO Terms", 
main.cex = 3, cat.fontface="bold", scaled = TRUE, label.cex = 3, cat.pos = c(330, 30), cat.cex = 2.5, fill = c("yellow", "green"), alpha = 0.5, cex = 3)


## now compare all vSARS viral loads
venn.diagram(list(High = allRes_BP1[,1], Med = allRes_BP3[,1], Low = allRes_BP4[,1]), filename = "PLOTS-CAT/HighvsMedvsLow-GOterms.tiff", height = 3000, width = 3000, resolution =
    300, imagetype = "tiff", units = "px", main = " High vs Low GO Terms", 
main.cex = 3, cat.fontface="bold", scaled = TRUE, label.cex = 3, cat.pos = c(330, 30, 180), cat.cex = 2.5, fill = c("red", "green", "lightblue"), alpha = 0.5, cex = 3)

venn.diagram(list(High = allRes_BP1[,1], Med = allRes_BP3[,1], Low = allRes_BP4[,1], Neg = allRes_BP6[,1]), filename = "PLOTS-CAT/HighvsMedvsLowvsNeg-GOterms.tiff", height = 3000, width = 3000, resolution =
    300, imagetype = "tiff", units = "px", main = "  GO Terms", 
main.cex = 3, cat.fontface="bold", scaled = TRUE, label.cex = 3, cat.cex = 2.5, fill = c("red", "green", "lightblue", "yellow"), alpha = 0.5, cex = 3)

venn.diagram(list( Med = allRes_BP3[,1], Low = allRes_BP4[,1], Neg = allRes_BP6[,1]), 
filename = "PLOTS-CAT/MedvsLowvsNeg-GOterms.tiff", height = 5000, width = 3000, 
resolution = 300, imagetype = "tiff", units = "px", main = "  GO Terms", 
main.cex = 3, cat.fontface="bold", scaled = TRUE, label.cex = 3, cat.pos = c(330, 30, 180), cat.cex = 2.5, 
fill = c("green", "lightblue", "yellow"), alpha = 0.5, cex = 3)
